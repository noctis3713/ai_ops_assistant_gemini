# Docker Compose 設定檔 for AI Ops Assistant
# All-in-One VM 部署方案 (HTTPS-First) - 企業級強化版本
# Version: v2.5.3

version: '3.8'

services:
  # =============================================================================
  # 服務一：反向代理/閘道 (Nginx Proxy Manager)
  # =============================================================================
  proxy:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: ai_ops_proxy_manager
    hostname: proxy
    restart: unless-stopped
    
    ports:
      # --- HTTPS-First 架構：只開放必要端口 ---
      - "${HTTPS_PORT:-443}:443"      # Public HTTPS Port
      - "${PROXY_ADMIN_PORT:-81}:81"  # NPM 管理介面 (僅限內部訪問)
      # - "80:80"  # HTTP 端口已註解，強制所有流量走 HTTPS
    
    environment:
      # 設定預設管理員帳號 (首次啟動後請立即更改)
      DISABLE_IPV6: 'true'
    
    volumes:
      # 持久化儲存 NPM 資料和 SSL 憑證
      - ${PROXY_DATA_PATH:-./proxy-data}:/data
      - ${SSL_PATH:-./letsencrypt}:/etc/letsencrypt
      - /etc/localtime:/etc/localtime:ro
    
    networks:
      - ai-ops-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:81/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # =============================================================================
  # 服務二：後端應用 (FastAPI)
  # =============================================================================
  backend:
    build:
      context: ./WEB_APP/backend
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
    
    container_name: ai_ops_backend
    hostname: backend
    restart: unless-stopped
    
    environment:
      # AI 服務環境變數
      - AI_PROVIDER=${AI_PROVIDER:-gemini}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-1.5-flash-latest}
      - CLAUDE_MODEL=${CLAUDE_MODEL:-claude-3-haiku-20240307}
      
      # 功能開關
      - ENABLE_DOCUMENT_SEARCH=${ENABLE_DOCUMENT_SEARCH:-false}
      - PARSER_VERSION=${PARSER_VERSION:-original}
      
      # 系統配置
      - ADMIN_API_KEY=${ADMIN_API_KEY:-admin123}
      - PROMPT_LANGUAGE=${PROMPT_LANGUAGE:-zh_TW}
      - PROMPT_TEMPLATE_DIR=${PROMPT_TEMPLATE_DIR:-/app/templates/prompts}
      
      # 網路配置
      - DEVICE_CONNECTION_TIMEOUT=${DEVICE_CONNECTION_TIMEOUT:-30}
      - COMMAND_EXECUTION_TIMEOUT=${COMMAND_EXECUTION_TIMEOUT:-20}
      - MAX_CONCURRENT_CONNECTIONS=${MAX_CONCURRENT_CONNECTIONS:-5}
      
      # 日誌配置
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_VERBOSE_LOGGING=${ENABLE_VERBOSE_LOGGING:-false}
      
      # 容器特定配置
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    
    volumes:
      # 持久化重要資料
      - ${LOGS_PATH:-./logs}:/app/logs
      - ${CONFIG_PATH:-./WEB_APP/backend/config}:/app/config
      - /etc/localtime:/etc/localtime:ro
    
    networks:
      - ai-ops-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    
    depends_on:
      - proxy
    
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '8.0'
        reservations:
          memory: 4G
          cpus: '4.0'

  # =============================================================================  
  # 服務三：前端應用 (React + Nginx)
  # =============================================================================
  frontend:
    build:
      context: ./WEB_APP/frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://backend:8000}
        - VITE_ENVIRONMENT=${VITE_ENVIRONMENT:-production}
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
    
    container_name: ai_ops_frontend
    hostname: frontend
    restart: unless-stopped
    
    environment:
      # Nginx 環境變數
      - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-auto}
      - NGINX_WORKER_CONNECTIONS=${NGINX_WORKER_CONNECTIONS:-1024}
    
    volumes:
      # 時間同步
      - /etc/localtime:/etc/localtime:ro
    
    networks:
      - ai-ops-network
    
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    depends_on:
      backend:
        condition: service_healthy
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

# =============================================================================
# 網路配置
# =============================================================================
networks:
  ai-ops-network:
    driver: bridge
    name: ai_ops_network
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# =============================================================================
# Volume 配置 (如需要可取消註解)
# =============================================================================
# volumes:
#   ai_ops_logs:
#     driver: local
#   ai_ops_config:
#     driver: local
#   ai_ops_ssl:
#     driver: local
#   ai_ops_proxy_data:
#     driver: local